//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Easy_Stock
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Easy_Stock_Entities : DbContext
    {
        public Easy_Stock_Entities()
            : base("name=Easy_Stock_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Categorias> Categorias { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Depositos> Depositos { get; set; }
        public virtual DbSet<Detalles_Facturas> Detalles_Facturas { get; set; }
        public virtual DbSet<Detalles_Pedidos> Detalles_Pedidos { get; set; }
        public virtual DbSet<Detalles_Remitos> Detalles_Remitos { get; set; }
        public virtual DbSet<Deudas_Clientes> Deudas_Clientes { get; set; }
        public virtual DbSet<Empresas> Empresas { get; set; }
        public virtual DbSet<Estados_Productos> Estados_Productos { get; set; }
        public virtual DbSet<Facturas> Facturas { get; set; }
        public virtual DbSet<Formas_Pago> Formas_Pago { get; set; }
        public virtual DbSet<Inventario> Inventario { get; set; }
        public virtual DbSet<Localidades> Localidades { get; set; }
        public virtual DbSet<Lotes> Lotes { get; set; }
        public virtual DbSet<LotesxProductos> LotesxProductos { get; set; }
        public virtual DbSet<Marcas> Marcas { get; set; }
        public virtual DbSet<Pedidos> Pedidos { get; set; }
        public virtual DbSet<Productos> Productos { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
        public virtual DbSet<Provincias> Provincias { get; set; }
        public virtual DbSet<Remitos> Remitos { get; set; }
        public virtual DbSet<Reportes> Reportes { get; set; }
        public virtual DbSet<Sexos> Sexos { get; set; }
        public virtual DbSet<Sucursales> Sucursales { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Tipos_Clientes> Tipos_Clientes { get; set; }
        public virtual DbSet<Tipos_Devoluciones> Tipos_Devoluciones { get; set; }
        public virtual DbSet<Tipos_Empresas> Tipos_Empresas { get; set; }
        public virtual DbSet<Tipos_Facturas> Tipos_Facturas { get; set; }
        public virtual DbSet<Tipos_Reportes> Tipos_Reportes { get; set; }
        public virtual DbSet<Tipos_Transacciones> Tipos_Transacciones { get; set; }
        public virtual DbSet<Tipos_Usuarios> Tipos_Usuarios { get; set; }
        public virtual DbSet<Transacciones> Transacciones { get; set; }
        public virtual DbSet<Transacciones_x_Transacciones> Transacciones_x_Transacciones { get; set; }
        public virtual DbSet<Transportistas> Transportistas { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
    
        public virtual int ReponerProducto(Nullable<int> idProducto, string codigoProducto, Nullable<int> cantidad)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var codigoProductoParameter = codigoProducto != null ?
                new ObjectParameter("codigoProducto", codigoProducto) :
                new ObjectParameter("codigoProducto", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ReponerProducto", idProductoParameter, codigoProductoParameter, cantidadParameter);
        }
    
        public virtual int SP_AgregarClienteEmpresa(Nullable<int> idTipoCliente, string telefono, string email, string direccion, Nullable<int> idLocalidad, Nullable<int> idProvincia, string codigoPostal, Nullable<int> idTipoEmpresa, string razonSocial, string cuit, string barrio, Nullable<bool> habilitado)
        {
            var idTipoClienteParameter = idTipoCliente.HasValue ?
                new ObjectParameter("idTipoCliente", idTipoCliente) :
                new ObjectParameter("idTipoCliente", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var idLocalidadParameter = idLocalidad.HasValue ?
                new ObjectParameter("idLocalidad", idLocalidad) :
                new ObjectParameter("idLocalidad", typeof(int));
    
            var idProvinciaParameter = idProvincia.HasValue ?
                new ObjectParameter("idProvincia", idProvincia) :
                new ObjectParameter("idProvincia", typeof(int));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("codigoPostal", codigoPostal) :
                new ObjectParameter("codigoPostal", typeof(string));
    
            var idTipoEmpresaParameter = idTipoEmpresa.HasValue ?
                new ObjectParameter("idTipoEmpresa", idTipoEmpresa) :
                new ObjectParameter("idTipoEmpresa", typeof(int));
    
            var razonSocialParameter = razonSocial != null ?
                new ObjectParameter("razonSocial", razonSocial) :
                new ObjectParameter("razonSocial", typeof(string));
    
            var cuitParameter = cuit != null ?
                new ObjectParameter("cuit", cuit) :
                new ObjectParameter("cuit", typeof(string));
    
            var barrioParameter = barrio != null ?
                new ObjectParameter("barrio", barrio) :
                new ObjectParameter("barrio", typeof(string));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AgregarClienteEmpresa", idTipoClienteParameter, telefonoParameter, emailParameter, direccionParameter, idLocalidadParameter, idProvinciaParameter, codigoPostalParameter, idTipoEmpresaParameter, razonSocialParameter, cuitParameter, barrioParameter, habilitadoParameter);
        }
    
        public virtual int SP_AgregarClientePersona(Nullable<int> idTipoCliente, string telefono, string email, string direccion, Nullable<int> idLocalidad, Nullable<int> idProvincia, string codigoPostal, Nullable<System.DateTime> fechaNacimiento, Nullable<int> idSexo, string nombre, string apellido, string dni, string barrio, Nullable<bool> habilitado)
        {
            var idTipoClienteParameter = idTipoCliente.HasValue ?
                new ObjectParameter("idTipoCliente", idTipoCliente) :
                new ObjectParameter("idTipoCliente", typeof(int));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("direccion", direccion) :
                new ObjectParameter("direccion", typeof(string));
    
            var idLocalidadParameter = idLocalidad.HasValue ?
                new ObjectParameter("idLocalidad", idLocalidad) :
                new ObjectParameter("idLocalidad", typeof(int));
    
            var idProvinciaParameter = idProvincia.HasValue ?
                new ObjectParameter("idProvincia", idProvincia) :
                new ObjectParameter("idProvincia", typeof(int));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("codigoPostal", codigoPostal) :
                new ObjectParameter("codigoPostal", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(System.DateTime));
    
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("idSexo", idSexo) :
                new ObjectParameter("idSexo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var dniParameter = dni != null ?
                new ObjectParameter("dni", dni) :
                new ObjectParameter("dni", typeof(string));
    
            var barrioParameter = barrio != null ?
                new ObjectParameter("barrio", barrio) :
                new ObjectParameter("barrio", typeof(string));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AgregarClientePersona", idTipoClienteParameter, telefonoParameter, emailParameter, direccionParameter, idLocalidadParameter, idProvinciaParameter, codigoPostalParameter, fechaNacimientoParameter, idSexoParameter, nombreParameter, apellidoParameter, dniParameter, barrioParameter, habilitadoParameter);
        }
    
        public virtual int SP_AgregarDeposito(string desc, Nullable<bool> completo, string nombreSucu, string direSucu, Nullable<int> idLocalidad, Nullable<int> idProvincia)
        {
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var completoParameter = completo.HasValue ?
                new ObjectParameter("completo", completo) :
                new ObjectParameter("completo", typeof(bool));
    
            var nombreSucuParameter = nombreSucu != null ?
                new ObjectParameter("nombreSucu", nombreSucu) :
                new ObjectParameter("nombreSucu", typeof(string));
    
            var direSucuParameter = direSucu != null ?
                new ObjectParameter("direSucu", direSucu) :
                new ObjectParameter("direSucu", typeof(string));
    
            var idLocalidadParameter = idLocalidad.HasValue ?
                new ObjectParameter("idLocalidad", idLocalidad) :
                new ObjectParameter("idLocalidad", typeof(int));
    
            var idProvinciaParameter = idProvincia.HasValue ?
                new ObjectParameter("idProvincia", idProvincia) :
                new ObjectParameter("idProvincia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AgregarDeposito", descParameter, completoParameter, nombreSucuParameter, direSucuParameter, idLocalidadParameter, idProvinciaParameter);
        }
    
        public virtual int SP_AgregarProducto(string codigo, Nullable<int> idMarca, string nombre, Nullable<decimal> precioVenta, Nullable<decimal> precioCosto, string descripcion, Nullable<int> idCategoria, Nullable<int> idProveedor, Nullable<int> idDeposito, Nullable<int> stockMinimo, Nullable<int> stockMaximo, Nullable<int> cantidad, Nullable<System.DateTime> fechaVenc, Nullable<System.DateTime> fechaElab, Nullable<bool> habilitado, Nullable<System.DateTime> fechaIngreso)
        {
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var idMarcaParameter = idMarca.HasValue ?
                new ObjectParameter("idMarca", idMarca) :
                new ObjectParameter("idMarca", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var precioVentaParameter = precioVenta.HasValue ?
                new ObjectParameter("precioVenta", precioVenta) :
                new ObjectParameter("precioVenta", typeof(decimal));
    
            var precioCostoParameter = precioCosto.HasValue ?
                new ObjectParameter("precioCosto", precioCosto) :
                new ObjectParameter("precioCosto", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("idCategoria", idCategoria) :
                new ObjectParameter("idCategoria", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            var idDepositoParameter = idDeposito.HasValue ?
                new ObjectParameter("idDeposito", idDeposito) :
                new ObjectParameter("idDeposito", typeof(int));
    
            var stockMinimoParameter = stockMinimo.HasValue ?
                new ObjectParameter("stockMinimo", stockMinimo) :
                new ObjectParameter("stockMinimo", typeof(int));
    
            var stockMaximoParameter = stockMaximo.HasValue ?
                new ObjectParameter("stockMaximo", stockMaximo) :
                new ObjectParameter("stockMaximo", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var fechaVencParameter = fechaVenc.HasValue ?
                new ObjectParameter("fechaVenc", fechaVenc) :
                new ObjectParameter("fechaVenc", typeof(System.DateTime));
    
            var fechaElabParameter = fechaElab.HasValue ?
                new ObjectParameter("fechaElab", fechaElab) :
                new ObjectParameter("fechaElab", typeof(System.DateTime));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("habilitado", habilitado) :
                new ObjectParameter("habilitado", typeof(bool));
    
            var fechaIngresoParameter = fechaIngreso.HasValue ?
                new ObjectParameter("fechaIngreso", fechaIngreso) :
                new ObjectParameter("fechaIngreso", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AgregarProducto", codigoParameter, idMarcaParameter, nombreParameter, precioVentaParameter, precioCostoParameter, descripcionParameter, idCategoriaParameter, idProveedorParameter, idDepositoParameter, stockMinimoParameter, stockMaximoParameter, cantidadParameter, fechaVencParameter, fechaElabParameter, habilitadoParameter, fechaIngresoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_CambiarProducto(Nullable<int> idProducto, Nullable<int> idInventario, string codigo, Nullable<int> cantidadProducto, Nullable<int> idEstado, Nullable<int> idCliente, Nullable<int> cantidadDevuelta, Nullable<int> idTransaccion, Nullable<System.DateTime> fecha, Nullable<int> idTipoTransaccion, Nullable<int> idUsuario, string descripcion, Nullable<int> esPrimeraVez)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var idInventarioParameter = idInventario.HasValue ?
                new ObjectParameter("idInventario", idInventario) :
                new ObjectParameter("idInventario", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var cantidadProductoParameter = cantidadProducto.HasValue ?
                new ObjectParameter("cantidadProducto", cantidadProducto) :
                new ObjectParameter("cantidadProducto", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("idEstado", idEstado) :
                new ObjectParameter("idEstado", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var cantidadDevueltaParameter = cantidadDevuelta.HasValue ?
                new ObjectParameter("cantidadDevuelta", cantidadDevuelta) :
                new ObjectParameter("cantidadDevuelta", typeof(int));
    
            var idTransaccionParameter = idTransaccion.HasValue ?
                new ObjectParameter("idTransaccion", idTransaccion) :
                new ObjectParameter("idTransaccion", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var idTipoTransaccionParameter = idTipoTransaccion.HasValue ?
                new ObjectParameter("idTipoTransaccion", idTipoTransaccion) :
                new ObjectParameter("idTipoTransaccion", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var esPrimeraVezParameter = esPrimeraVez.HasValue ?
                new ObjectParameter("esPrimeraVez", esPrimeraVez) :
                new ObjectParameter("esPrimeraVez", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CambiarProducto", idProductoParameter, idInventarioParameter, codigoParameter, cantidadProductoParameter, idEstadoParameter, idClienteParameter, cantidadDevueltaParameter, idTransaccionParameter, fechaParameter, idTipoTransaccionParameter, idUsuarioParameter, descripcionParameter, esPrimeraVezParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_DevolverProducto(Nullable<int> idProducto, Nullable<int> idInventario, string codigo, Nullable<int> cantidadProducto, Nullable<int> idEstado, Nullable<int> idCliente, Nullable<decimal> montoDevuelto, Nullable<int> idTransaccion, Nullable<System.DateTime> fecha, Nullable<int> tipoDevolucion, Nullable<int> idTipoTransaccion, Nullable<int> idUsuario, string descripcion, Nullable<int> esPrimeraVez)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var idInventarioParameter = idInventario.HasValue ?
                new ObjectParameter("idInventario", idInventario) :
                new ObjectParameter("idInventario", typeof(int));
    
            var codigoParameter = codigo != null ?
                new ObjectParameter("codigo", codigo) :
                new ObjectParameter("codigo", typeof(string));
    
            var cantidadProductoParameter = cantidadProducto.HasValue ?
                new ObjectParameter("cantidadProducto", cantidadProducto) :
                new ObjectParameter("cantidadProducto", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("idEstado", idEstado) :
                new ObjectParameter("idEstado", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var montoDevueltoParameter = montoDevuelto.HasValue ?
                new ObjectParameter("montoDevuelto", montoDevuelto) :
                new ObjectParameter("montoDevuelto", typeof(decimal));
    
            var idTransaccionParameter = idTransaccion.HasValue ?
                new ObjectParameter("idTransaccion", idTransaccion) :
                new ObjectParameter("idTransaccion", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var tipoDevolucionParameter = tipoDevolucion.HasValue ?
                new ObjectParameter("tipoDevolucion", tipoDevolucion) :
                new ObjectParameter("tipoDevolucion", typeof(int));
    
            var idTipoTransaccionParameter = idTipoTransaccion.HasValue ?
                new ObjectParameter("idTipoTransaccion", idTipoTransaccion) :
                new ObjectParameter("idTipoTransaccion", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var esPrimeraVezParameter = esPrimeraVez.HasValue ?
                new ObjectParameter("esPrimeraVez", esPrimeraVez) :
                new ObjectParameter("esPrimeraVez", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DevolverProducto", idProductoParameter, idInventarioParameter, codigoParameter, cantidadProductoParameter, idEstadoParameter, idClienteParameter, montoDevueltoParameter, idTransaccionParameter, fechaParameter, tipoDevolucionParameter, idTipoTransaccionParameter, idUsuarioParameter, descripcionParameter, esPrimeraVezParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_EditarDeposito(Nullable<int> idDeposito, string desc, Nullable<bool> completo, Nullable<int> idSucu, string nombreSucu, string dire, Nullable<int> idLocalidad, Nullable<int> idProvincia)
        {
            var idDepositoParameter = idDeposito.HasValue ?
                new ObjectParameter("idDeposito", idDeposito) :
                new ObjectParameter("idDeposito", typeof(int));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var completoParameter = completo.HasValue ?
                new ObjectParameter("completo", completo) :
                new ObjectParameter("completo", typeof(bool));
    
            var idSucuParameter = idSucu.HasValue ?
                new ObjectParameter("idSucu", idSucu) :
                new ObjectParameter("idSucu", typeof(int));
    
            var nombreSucuParameter = nombreSucu != null ?
                new ObjectParameter("nombreSucu", nombreSucu) :
                new ObjectParameter("nombreSucu", typeof(string));
    
            var direParameter = dire != null ?
                new ObjectParameter("dire", dire) :
                new ObjectParameter("dire", typeof(string));
    
            var idLocalidadParameter = idLocalidad.HasValue ?
                new ObjectParameter("idLocalidad", idLocalidad) :
                new ObjectParameter("idLocalidad", typeof(int));
    
            var idProvinciaParameter = idProvincia.HasValue ?
                new ObjectParameter("idProvincia", idProvincia) :
                new ObjectParameter("idProvincia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditarDeposito", idDepositoParameter, descParameter, completoParameter, idSucuParameter, nombreSucuParameter, direParameter, idLocalidadParameter, idProvinciaParameter);
        }
    
        public virtual int SP_EliminarDeposito(Nullable<int> idDeposito, Nullable<int> idSucu)
        {
            var idDepositoParameter = idDeposito.HasValue ?
                new ObjectParameter("idDeposito", idDeposito) :
                new ObjectParameter("idDeposito", typeof(int));
    
            var idSucuParameter = idSucu.HasValue ?
                new ObjectParameter("idSucu", idSucu) :
                new ObjectParameter("idSucu", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarDeposito", idDepositoParameter, idSucuParameter);
        }
    
        public virtual int SP_EliminarProductoInventario(Nullable<int> cantidadProductos, Nullable<int> idProducto)
        {
            var cantidadProductosParameter = cantidadProductos.HasValue ?
                new ObjectParameter("cantidadProductos", cantidadProductos) :
                new ObjectParameter("cantidadProductos", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EliminarProductoInventario", cantidadProductosParameter, idProductoParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_InsertarDetalle_QuitarDeInventario(Nullable<int> nroFact, Nullable<int> idProducto, Nullable<decimal> iva, Nullable<decimal> subTotal, Nullable<decimal> precio, Nullable<int> cantActualizada, Nullable<int> cantidadProducto, string codigoProducto, Nullable<int> idEstado)
        {
            var nroFactParameter = nroFact.HasValue ?
                new ObjectParameter("nroFact", nroFact) :
                new ObjectParameter("nroFact", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var ivaParameter = iva.HasValue ?
                new ObjectParameter("iva", iva) :
                new ObjectParameter("iva", typeof(decimal));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("subTotal", subTotal) :
                new ObjectParameter("subTotal", typeof(decimal));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var cantActualizadaParameter = cantActualizada.HasValue ?
                new ObjectParameter("cantActualizada", cantActualizada) :
                new ObjectParameter("cantActualizada", typeof(int));
    
            var cantidadProductoParameter = cantidadProducto.HasValue ?
                new ObjectParameter("cantidadProducto", cantidadProducto) :
                new ObjectParameter("cantidadProducto", typeof(int));
    
            var codigoProductoParameter = codigoProducto != null ?
                new ObjectParameter("codigoProducto", codigoProducto) :
                new ObjectParameter("codigoProducto", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("idEstado", idEstado) :
                new ObjectParameter("idEstado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarDetalle_QuitarDeInventario", nroFactParameter, idProductoParameter, ivaParameter, subTotalParameter, precioParameter, cantActualizadaParameter, cantidadProductoParameter, codigoProductoParameter, idEstadoParameter);
        }
    
        public virtual int SP_RegistrarVenta(Nullable<System.DateTime> fecha, string desc, Nullable<int> idCliente, Nullable<int> idProveedor, Nullable<int> idEmpresa, Nullable<float> descuento, Nullable<float> total, Nullable<int> idFormaPago, Nullable<int> idTipoTransaccion, Nullable<int> idUsuario)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            var idEmpresaParameter = idEmpresa.HasValue ?
                new ObjectParameter("idEmpresa", idEmpresa) :
                new ObjectParameter("idEmpresa", typeof(int));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(float));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(float));
    
            var idFormaPagoParameter = idFormaPago.HasValue ?
                new ObjectParameter("idFormaPago", idFormaPago) :
                new ObjectParameter("idFormaPago", typeof(int));
    
            var idTipoTransaccionParameter = idTipoTransaccion.HasValue ?
                new ObjectParameter("idTipoTransaccion", idTipoTransaccion) :
                new ObjectParameter("idTipoTransaccion", typeof(int));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("idUsuario", idUsuario) :
                new ObjectParameter("idUsuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RegistrarVenta", fechaParameter, descParameter, idClienteParameter, idProveedorParameter, idEmpresaParameter, descuentoParameter, totalParameter, idFormaPagoParameter, idTipoTransaccionParameter, idUsuarioParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SP_VaciarTransacciones()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VaciarTransacciones");
        }
    }
}
